import whisper
import os
import pyaudio
import wave
import pyttsx3

#File to store all recorded messages
LOG_FILE = "voice_messages.txt"

def record_audio(output_file, record_seconds=5):
    """Record audio from microphone and save to a file."""
    chunk = 1024  # Buffer size
    format = pyaudio.paInt16  # Audio format
    channels = 1  # Mono channel
    rate = 44100  # Sampling rate

    # Initialize PyAudio
    p = pyaudio.PyAudio()
    stream = p.open(format=format,
                    channels=channels,
                    rate=rate,
                    input=True,
                    frames_per_buffer=chunk)

    print("Recording...")
    frames = []
    for _ in range(0, int(rate / chunk * record_seconds)):
        data = stream.read(chunk)
        frames.append(data)

    # Stop and close the stream
    stream.stop_stream()
    stream.close()
    p.terminate()
    print("Recording finished.")

    # Save the recorded audio
    with wave.open(output_file, 'wb') as wf:
        wf.setnchannels(channels)
        wf.setsampwidth(p.get_sample_size(format))
        wf.setframerate(rate)
        wf.writeframes(b''.join(frames))

def transcribe_audio(model, audio_path):
    # Transcribe audio using Whisper model.
    print("Transcribing...")
    result = model.transcribe(audio_path)
    transcription = result["text"]
    print("You said:", transcription)
    return transcription

def append_to_file(file_path, text):
    with open(file_path, "a") as file:
        file.write(text + "\n")

def text_to_speech(text):
    print("AI says:", text)
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

if __name__ == "__main__":    
    print("Loading Whisper model...")
    model = whisper.load_model("base")

    while True:
        try:
            #Recording audio
            audio_file = "user_input.wav"
            record_audio(audio_file, record_seconds=5)

            #Transcribing audio
            transcription = transcribe_audio(model, audio_file)

            #Appending transcribed text in a LOG file
            append_to_file(LOG_FILE, transcription)

            #reply to the user
            text_to_speech(transcription)

        except KeyboardInterrupt:
            print("\nExiting...")
            break
        except Exception as e:
            print(f"An error occurred: {e}")
